package com.horrayzone.horrayzone.ui;import android.accounts.Account;import android.accounts.AccountManager;import android.animation.TimeInterpolator;import android.content.Intent;import android.graphics.PorterDuff;import android.graphics.PorterDuffColorFilter;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.support.design.widget.AppBarLayout;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.view.ViewTreeObserver;import android.view.animation.DecelerateInterpolator;import android.widget.ProgressBar;import android.widget.Toast;import com.horrayzone.horrayzone.R;import com.horrayzone.horrayzone.sync.AccountAuthenticator;import com.horrayzone.horrayzone.util.AccountUtils;import com.horrayzone.horrayzone.util.SyncUtils;import com.horrayzone.horrayzone.util.UiUtils;public class AuthenticatorActivity extends AccountAuthenticatorAppCompatActivity implements        FragmentManager.OnBackStackChangedListener {    private static final String TAG = "AuthenticatorActivity";    public final static String EXTRA_ACCOUNT_NAME = "extra_account_name";    public final static String EXTRA_AUTHTOKEN_TYPE = "extra_authtoken_type";    public final static String EXTRA_REFRESH_TOKEN = "extra_refresh_token";    public final static String EXTRA_IS_ADDING_NEW_ACCOUNT = "extra_is_adding_new_account";    public final static String EXTRA_ERROR_MESSAGE = "extra_error_message";    public final static String EXTRA_IS_FIRST_LAUNCH = "extra_first_launch";    public static final String STATE_ACTION_BAR_SHOWN = "state_action_bar_shown";    public static final String TAG_FRAGMENT_WELCOME = "fragment_welcome";    public static final String TAG_FRAGMENT_SIGN_UP = "fragment_sign_up";    public static final String TAG_FRAGMENT_SIGN_IN = "fragment_sign_in";    private static final long ANIMATION_DURATION = 200L;    private static final TimeInterpolator ANIMATION_INTERPOLATOR = new DecelerateInterpolator();    private AccountManager mAccountManager;    private AppBarLayout mAppBar;    private ProgressBar mToolbarProgressBar;    private View mDropShadowView;    private String mAuthTokenType;    private boolean mRequestNewAccount;    private boolean mActionBarShown = true;    private boolean mIsBackEnabled = true;    private boolean mLaunchFromInApp;    private Handler mHandler = new Handler();    @Override    public void onCreate(final Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_authenticator);        mAccountManager = AccountManager.get(getBaseContext());        Account[] accounts = mAccountManager.getAccountsByType(AccountAuthenticator.ACCOUNT_TYPE);        for (Account account : accounts) {            if (!account.name.equals(AccountAuthenticator.ACCOUNT_NAME_SYNC)) {                // TODO: Convert this hardcoded string to a string resource.                Toast.makeText(this, "Multiple accounts are not supported by HoorayZone Couture. Remove the existing account first.", Toast.LENGTH_LONG).show();                finish();            }        }        // Get the extras coming in the caller intent.        Intent intent = getIntent();        mLaunchFromInApp = intent.getBooleanExtra(EXTRA_IS_FIRST_LAUNCH, false);        mRequestNewAccount = intent.getBooleanExtra(EXTRA_IS_ADDING_NEW_ACCOUNT, true);        mAuthTokenType = intent.getStringExtra(EXTRA_AUTHTOKEN_TYPE);        if (mAuthTokenType == null) {            mAuthTokenType = AccountAuthenticator.AUTHTOKEN_TYPE;        }        mAppBar = (AppBarLayout) findViewById(R.id.app_bar_layout);        Toolbar toolbar = (Toolbar) mAppBar.findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        setActionBarShownNoAnimation(false);        setActionBarTitle(null);        mToolbarProgressBar = (ProgressBar) toolbar.findViewById(R.id.toolbar_progress);        mDropShadowView = getDropShadowView();        // Tint the navigation icon with the app ?colorAccent.        Drawable navIcon = toolbar.getNavigationIcon();        if (navIcon != null) {            navIcon.setColorFilter(new PorterDuffColorFilter(                    UiUtils.getThemeColor(this, R.attr.colorAccent), PorterDuff.Mode.SRC_IN));        }        Fragment welcomeFragment = getSupportFragmentManager().findFragmentByTag(TAG_FRAGMENT_WELCOME);        if (welcomeFragment == null) {            welcomeFragment = WelcomeFragment.newInstance();            getSupportFragmentManager()                    .beginTransaction()                    .add(R.id.container, welcomeFragment, TAG_FRAGMENT_WELCOME)                    .commit();        }        final View root = findViewById(R.id.root);        root.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {            @Override            public boolean onPreDraw() {                root.getViewTreeObserver().removeOnPreDrawListener(this);                boolean shown = savedInstanceState != null && savedInstanceState.getBoolean(STATE_ACTION_BAR_SHOWN);                setActionBarShownNoAnimation(shown);                return true;            }        });    }    @Override    protected void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        outState.putBoolean(STATE_ACTION_BAR_SHOWN, mActionBarShown);    }    @Override    protected void onRestoreInstanceState(Bundle savedInstanceState) {        super.onRestoreInstanceState(savedInstanceState);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        if (item.getItemId() == android.R.id.home) {            onBackPressed();            return true;        }        return super.onOptionsItemSelected(item);    }    public void switchToSignUpFragment() {        /*Fragment signUpFragment = getSupportFragmentManager().findFragmentByTag(TAG_FRAGMENT_SIGN_UP);        if (signUpFragment == null) {            Log.d(TAG, "switchToSignUpFragment: creating new sign up fragment");            signUpFragment = SignUpFragment.newInstance();            getSupportFragmentManager()                    .beginTransaction()                    .detach(mCurrentFragment)                    .add(R.id.container, signUpFragment, TAG_FRAGMENT_SIGN_UP)                    .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                    .addToBackStack(null)                    .commit();        } else {            Log.d(TAG, "switchToSignUpFragment: reusing sign up fragment");            getSupportFragmentManager()                    .beginTransaction()                    .detach(mCurrentFragment)                    .attach(signUpFragment)                    .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                    .addToBackStack(null)                    .commit();        }        mCurrentFragment = signUpFragment;*/        Fragment signUpFragment = SignUpFragment.newInstance();        getSupportFragmentManager()                .beginTransaction()                .replace(R.id.container, signUpFragment, TAG_FRAGMENT_SIGN_UP)                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                .addToBackStack(null)                .commit();    }    public void switchToSignInFragment() {        Fragment signInFragment = SignInFragment.newInstance();        getSupportFragmentManager()                .beginTransaction()                .replace(R.id.container, signInFragment,TAG_FRAGMENT_SIGN_IN)                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                .addToBackStack(null)                .commit();    }    @Override    public void onBackStackChanged() {    }    @Override    public void onBackPressed() {        if (mIsBackEnabled) {            super.onBackPressed();        }    }    @SuppressWarnings("ConstantConditions")    public void setDisplayHomeAsUpEnabled(boolean enabled) {        getSupportActionBar().setDisplayHomeAsUpEnabled(enabled);        mIsBackEnabled = enabled;    }    public void setToolbarProgressEnabled(boolean enabled) {        mToolbarProgressBar.setVisibility(enabled ? View.VISIBLE : View.GONE);    }    @SuppressWarnings("ConstantConditions")    public void setActionBarTitle(CharSequence title) {        mHandler.post(() -> getSupportActionBar().setTitle(title));    }    public void setActionBarShown(boolean shown) {        setActionBarShownImpl(shown, true);    }    public void setActionBarShownNoAnimation(boolean shown) {        setActionBarShownImpl(shown, false);    }    public void setActionBarShownImpl(boolean shown, boolean animate) {        boolean isDropShadowPresent = mDropShadowView != null && mDropShadowView.getVisibility() == View.VISIBLE;        int dropShadowHeight = isDropShadowPresent ? mDropShadowView.getHeight() : 0;        int desiredTranslationY = shown ? 0 : -(mAppBar.getHeight() + dropShadowHeight);        long duration = animate ? ANIMATION_DURATION : 0;        mAppBar.animate()                .translationY(desiredTranslationY)                .setDuration(duration)                .setInterpolator(ANIMATION_INTERPOLATOR)                .start();        if (isDropShadowPresent) {            mDropShadowView.animate()                    .translationY(desiredTranslationY)                    .setDuration(duration)                    .setInterpolator(ANIMATION_INTERPOLATOR)                    .start();        }        mActionBarShown = shown;    }    private void configureNewAccount(Account newAccount) {        Log.d(TAG, "configureNewAccount");        // Once the new real account is on the device, remove the fake default sync account.        AccountUtils.removeAccount(this, SyncUtils.getDefaultSyncAccount());        // Store the account name in the preferences as the current active account.        AccountUtils.setActiveAccountName(this, newAccount.name);        // Configure automatic/periodic sync for this account and perform an immediate sync!        SyncUtils.onAccountCreated(newAccount, this);    }    public void finishSignIn(Intent intent) {        Log.d(TAG, "finishSignIn()");        String accountName = intent.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);        String refreshToken = intent.getStringExtra(EXTRA_REFRESH_TOKEN);        Account account = new Account(accountName, AccountAuthenticator.ACCOUNT_TYPE);        if (mRequestNewAccount) {            Log.d(TAG, "finishSignIn() > AccountManager.addAccountExplicitly()");            String authToken = intent.getStringExtra(AccountManager.KEY_AUTHTOKEN);            // Creating the account on the device and setting the auth token we got            // (Not setting the auth token will cause another call to the server to authenticate the user)            // Notice that we store the refresh token as the account password.            if (mAccountManager.addAccountExplicitly(account, refreshToken, null)) {                mAccountManager.setAuthToken(account, mAuthTokenType, authToken);                // Attach this new account to the SyncAdapter Framework.                configureNewAccount(account);            }        } else {            Log.d(TAG, "finishSignIn() > AccountManager.setPassword()");            mAccountManager.setPassword(account, refreshToken);        }        setAccountAuthenticatorResult(intent.getExtras());        setResult(RESULT_OK, intent);        if (mLaunchFromInApp) {            startActivity(new Intent(this, MainActivity.class));        }        finish();    }}